"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2791],{64688:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var s=n(24246),r=n(71670);const o={},a=void 0,i={id:"my/public/software/architecture/restful/errorHandle",title:"errorHandle",description:"as mentioned, https://developer.twitter.com/en/docs/basics/response-codes might be best",source:"@site/docs/my/public/software/architecture/restful/errorHandle.md",sourceDirName:"my/public/software/architecture/restful",slug:"/my/public/software/architecture/restful/errorHandle",permalink:"/note/docs/my/public/software/architecture/restful/errorHandle",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"index",permalink:"/note/docs/my/public/software/architecture/restful/"},next:{title:"openapi",permalink:"/note/docs/my/public/software/architecture/restful/openapi"}},c={},d=[{value:"front-end show error best practice",id:"front-end-show-error-best-practice",level:3}];function l(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["as mentioned, ",(0,s.jsx)(t.a,{href:"https://developer.twitter.com/en/docs/basics/response-codes",children:"https://developer.twitter.com/en/docs/basics/response-codes"})," might be ",(0,s.jsx)(t.strong,{children:"best"}),"\nhttp.HTTPStatus enum (convert by int()), generally agrees with twitter\nwerkzeug.http.HTTP_STATUS_CODES   maps from code to en message\nuse http status code,\nand also custom errors with both code and human messages\nin header?  or in body json?\nsimilar ideas:\n",(0,s.jsx)(t.a,{href:"https://gist.github.com/vkostyukov/32c84c0c01789425c29a",children:"HTTP status codes used by world famous APIs \xb7 GitHub"}),"\n",(0,s.jsx)(t.a,{href:"https://cloud.google.com/storage/docs/json_api/v1/status-codes",children:"https://cloud.google.com/storage/docs/json_api/v1/status-codes"}),"\nno custom code?\n",(0,s.jsx)(t.a,{href:"https://developer.github.com/v3/#client-errors",children:"https://developer.github.com/v3/#client-errors"}),"\na good deal to learn from\nin response uses header\nin url: ?page parameter\n",(0,s.jsx)(t.a,{href:"https://developer.github.com/guides/traversing-with-pagination",children:"https://developer.github.com/guides/traversing-with-pagination"}),"\n",(0,s.jsx)(t.a,{href:"https://datatracker.ietf.org/doc/rfc7807/?include_text=1",children:"https://datatracker.ietf.org/doc/rfc7807/?include_text=1"}),"\ninteresting idea of using URI than code to machine\nwould be great if it is popular"]}),"\n",(0,s.jsxs)(t.p,{children:["restful api http status code practice\n",(0,s.jsx)(t.a,{href:"http://stackoverflow.com/questions/24379837",children:"should http status codes be used in REST API design Stack "}),'\nseems like people do use status code as application logic code\nmodel http resource to application logic\n"Look at some apis implemented like Google apis, FB..they are have\nreturn codes defined within the returned reply (whether json/xml/text\u2026)"\nreally?']}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"http://stackoverflow.com/questions/942951",children:"web services REST API error return good practices Stack "}),'\n"The main choice is do you want to treat the HTTP status code as part\nof your REST API or not."']}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"http://www.codetinkerer.com/2015/12/04/choosing-an-http-status-code.html",children:"http://www.codetinkerer.com/2015/12/04/choosing-an-http-status-code.html"}),"\nseems nice for picking status code"]}),"\n",(0,s.jsx)(t.p,{children:'Good argument for using http status code, but do not take it to extreme\n"tunneling everything through a 200 is not restful at all. It prevents\nintermediaries from understanding the result of an operation, which\nwill kill any form of caching, it hides the semantics of the\noperation, and it imposes understanding the content of the message to\nprocess an error, breaching the self-contained messages constraint."'}),"\n",(0,s.jsxs)(t.p,{children:["restful architecture and practice\n",(0,s.jsx)(t.a,{href:"http://stackoverflow.com/questions/2001773",children:"web services Understanding REST Verbs error codes and a"}),'\ngood question, good answers\nsome suggest to map application as resources, and use verbs (get, put, delete, post, etc) and status codes\n"remember that HTTP headers are extensible; your application can define all the custom headers that you like"']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"HTTP/1.1 404 Not Found    \nX-Status-Extended: 404.3 More Specific Error Here\n\nThat way a HTTP client like a web browser will still know what to do with the regular 404 code, and a more sophisticated HTTP client can choose to look at the X-Status-Extended header for more specific information.\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol",children:"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"}),"\nalso has 'reason' in response header?"]}),"\n",(0,s.jsx)(t.h3,{id:"front-end-show-error-best-practice",children:"front-end show error best practice"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",children:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"}),"\ndon't like its using response.ok\nResponse.ok \u2014 a shorthand for checking that status is in the range 200-299 inclusive."]}),"\n",(0,s.jsx)(t.p,{children:"best practice fetch handle twitter API error code\nnot much\nhandle twitter API error code\nnot much"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://codereview.stackexchange.com/questions/133911/fetch-how-to-deal-with-a-json-payload-in-an-error-response",children:"https://codereview.stackexchange.com/questions/133911/fetch-how-to-deal-with-a-json-payload-in-an-error-response"}),"\na bit hard to understand"]}),"\n",(0,s.jsx)(t.p,{children:"My idea:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"https://gist.github.com/odewahn/5a5eeb23279eed6a80d7798fdb47fe91\n\n  let resStatus = 0   //this separate var sucks\n    guess can do away with this\n    e.g., res.json().then() in the same function of resStatus\n  fetch(Config.REST_API_URL + 'users/registration-request', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  })\n  .then(res => {\n    resStatus = res.status\n    return res.json()\n    or directly do \n    res.json().then(json => {if (res.status === 400 && res.code === 'xxx')})\n    or var x = function  (in order to closure res.status) \n  })\n  .then(res => {\n    switch (resStatus) {\n      case 201:\n        console.log('success')\n        break\n      case 400:\n        if (res.code === 'ValidationFailed') {\n          // My custom error messages from the API.\n          console.log(res.fieldMessages)\n        } else {\n          console.log('this is a client (probably invalid JSON) error, but also might be a server error (bad JSON parsing/validation)')\n        }\n        break\n      case 500:\n        console.log('server error, try again')\n        break\n      default:\n        console.log('unhandled')\n        break\n    }\n  })\n  .catch(err => {\n    console.error(err)\n  })\n\nmy better version:\n\n\n/**\n * this filter is for handling loginError only and leaving others to downstream codes to deal with\n*/\nfunction loginErrorFiltering(response) {\n    if (response.status === 401) {\n        const ssoUrl = `${config.api_host}/saml/sso/?next=${encodeURIComponent(window.location)}`;\n        window.location = ssoUrl;\n        return;\n    }\n    return response;\n}\n\n    fetch(config.api_server + \"/projects\",\n    {\n      credentials: 'include',\n      mode: 'cors',\n      method: \"POST\",\n      body: form\n    }).then(loginErrorFiltering).then(function(response) {\n      return response.json().then(json => {\n        //response is still accessible here\n        if (response.status === 400) {\n          json.errors.forEach(\n            e => {root.refs.err_bar.show(e.message);}\n          )\n        } else {  //no problem\n          root.get_project_list();\n          root.setState({edit_open: false});\n        }\n      })\n    }).catch(function(ex){\n      root.refs.err_bar.show(\"Fail when calling create project API\");\n    });\n\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},71670:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var s=n(27378);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);